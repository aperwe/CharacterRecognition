<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intuition library</name>
    </assembly>
    <members>
        <member name="T:QBits.Intuition.Financials.Banking.AccountTransaction">
            <summary>
            Base concept of any transaction on a bank account.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.Metric">
            <summary>
            Provides ability to calculate distances in a Mesh's metric (space).
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon">
            <summary>
            Neuryt, akson (axon)- element neuronu odpowiedzialny za przekazywanie informacji z ciała komórki do kolejnych neuronów lub komórek efektorowych
            (np. komórek mięśniowych bądź gruczołowych).
            Neuryt może być osłonięty osłonką włókien nerwowych.
            Jest z reguły dłuższy od dendrytów i w odróżnieniu od nich, w komórce występuje pojedynczo (choć może być rozgałęziony).
            <para/>http://pl.wikipedia.org/wiki/Neuryt
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.#ctor(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron)">
            <summary>
            Creates new instance of Axon that belongs to the indicated parent cell.
            </summary>
            <param name="parentCell">Parent cell (usually the caller) that creates this axon.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.ToString">
            <summary>
            Provides easy to read description of this axon.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.Excite(System.Double)">
            <summary>
            Called from the parent neuron cell. Excites the axon with the signal generated by the neuron.
            This causes the signal to be passed to the receiving dendrite.
            </summary>
            <param name="signal">Signal to be applied to this cell.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.OnAxonExcited">
            <summary>
            Called when this axon has been excited. Raises the event.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.ParentCell">
            <summary>
            Cell that owns this axon.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.SignalTarget">
            <summary>
            Target for the signal from this axon.
            </summary>
        </member>
        <member name="E:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon.AxonExcited">
            <summary>
            Event that is raised when this axon gets excited.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.AliModel">
            <summary>
            A basic model used in ALI. Other models kinds should derive from this class,
            as this is a base implementation of all models.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.AliModel.RegisterDefaultModels">
            <summary>
            Method called to register default (built-in) model types.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.Palindroms.Palindromer">
            <summary>
            Main class that provides access to palindrom features.
            <para/>This includes building a glossary, finding a palindrom out of input string, and more.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Palindroms.Palindromer.CreateSampleDictionary">
            <summary>
            Initializes a new instance of the sample dictionary.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Palindroms.Palindromer.AddWord(System.Xml.Linq.XElement,System.String)">
            <summary>
            Adds a new word entry to the specified dictionary. The word is lower-cased before adding.
            </summary>
            <param name="dict">Dictionary to add new word to</param>
            <param name="newWord">Word to be addded to the dictionary.</param>
        </member>
        <member name="P:QBits.Intuition.Text.Palindroms.Palindromer.SampleDictonary">
            <summary>
            Reference to a sample dictionary that contains a few words and can process a few sample palindroms.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Quant">
            <summary>
            Basic part of a probability cloud - quant.
            Characterized by probability measure - Weight.
            The quantitized object that can exist - with probability equal to Weight - is Particle.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Quant.Weight">
            <summary>
            Weight associated with this quant
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Quant.Particle">
            <summary>
            Quant object - could be a wave function, representation of a physical particle, a macroscopic object, etc.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.AbstractThreadedMesh">
            <summary>
            A base skeleton for a mesh class supporting multithreading.
            Derive a class from this class and override the MeshThreadEntryPoint() where your
            class will enter as a separate thread.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.AbstractThreadedMesh.#ctor">
            <summary>
            The base constructor takes care of creating the threaded mesh for you.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.AbstractThreadedMesh.DefaultSafeThreadStarter(System.Object)">
            <summary>
            Provides catching top-level exceptions from the thread, so that the application doesn't crash
            when specific thread doesn't catch all it's exceptions.
            </summary>
            <param name="threadParamObj">Object from ParametrizedThreadStart. It is ourselves, actually.</param>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.AbstractThreadedMesh.isActive">
            <summary>
            Indicates whether the thread of this mesh is running or if it should be stopped.
            Setting this flag to false will close the thread as soon as it passes around its message loop.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.AbstractThreadedMesh._nextSemaphoreId">
            <summary>
            Gets unique name for each semaphore.
            </summary>
            <returns>Name for the next newly created semaphore.</returns>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.SimpleMesh.ProcessNodeQueue(System.Collections.Generic.Queue{QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.MeshNode.MeshNodeTemplate})">
            <summary>
            Processes one entry from the node queue (if the queue is non-empty).
            </summary>
            <param name="newNodeQueue">Queue that is to be processed.</param>
            <returns>True if the queue needs more processing.</returns>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.SimpleMesh._rank">
            <summary>
            This mesh rank (number of dimensions).
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell">
            <summary>
            Base cell class for all cells in brain. Cannot be implemented.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.PositionCell(QBits.Intuition.Mathematics.Geometry.Cube)">
            <summary>
            Positions the cell randomly within the limits of this bounding cube.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.ToString">
            <summary>
            Displays cell's unique ID for easy distinguishing between two cell.s
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.Between(System.Double,System.Double)">
            <summary>
            Gets a random number between the origin value and origin + stretch.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.RandomGenerator">
            <summary>
            Random generator used for randomness.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.UniqueID">
            <summary>
            Unique identification of this cell across the whole neural network.
            Assigned automatically when the cell is constructed.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseCell.Position">
            <summary>
            Position of this cell within the world.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.Language.AbstractALI">
            <summary>
            Not a human language. This is the 'concept' language of the ALI brain.
            To see a human-readable version, it has to be 'narrowed' to of the specific languages.
            </summary>
            <remarks>This is the default value for internal representations of concepts and meanings.</remarks>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.OutputLayer">
            <summary>
            Layer that allows neurons contained in it to provide output signals to the external world.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.InterfaceLayer">
            <summary>
            A layer interfacing with the external world. It can either be an input or output layer.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer">
            <summary>
            Neural network layer. Cells in a network can be grouped in layers (but don't have to).
            Layers are a logical organization, but are not required.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.LayerCells">
            <summary>
            All cells in this layer.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.#ctor(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network)">
            <summary>
            Creates an new layer by 
            </summary>
            <param name="owner">Network that this layer belongs to.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.AddCell``1(``0)">
            <summary>
            Adds a constructed cell to the specified network.
            </summary>
            <typeparam name="TCell">Type of the cell being added.</typeparam>
            <param name="cell">Cell being added.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.ToString">
            <summary>
            Returns a human-readable description of this object.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.Owner">
            <summary>
            Each layer needs to belong to a network. This is a requirement.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.CellCount">
            <summary>
            Gets the number of cells in this neuron layer.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Layer.Cells">
            <summary>
            Gets enumeration of all cells in this layer.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.OutputLayer.#ctor(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network)">
            <summary>
            Constructs the output layer.
            </summary>
            <param name="owner">Network that this layer belongs to.</param>
        </member>
        <member name="M:QBits.Intuition.DesignPatterns.Factory.IFactorableByString.GetObjectType">
            <summary>
            An object type that is known to its factory.
            I.e. factory can recreate the required object type based on this value.
            This should match what you place in factory registrar.
            Used for deserialization.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.EdbCsvMeshBuilder.CSVAnalyser.sleepTime">
            <summary>
            Adds more time (miliseconds) to processor sleeping, as requested in message loop,
            so that the thread sleeps more in the next iteration.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.MeshNode._mother">
            <summary>
            Mesh this node belongs to.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.EdbCsvMeshBuilder.CSVMeshNode.DebugDump">
            <summary>
            Dumps the contents of the XML to file.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.EdbCsvMeshBuilder.CSVMeshNode._definition">
            <summary>
            All information related to this node.
            Includes raw data from the input file, parsed data, as well
            as all predicted traits on the node (term).
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.EdbCsvMeshBuilder.CSVMeshNode.CSVMeshNodeTemplate.#ctor(System.String)">
            <summary>
            The nodeName of this template is the whole CSV string.
            Clumsy and probably will need remaking into something more readable.
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory">
            <summary>
            Factory class that is to be used to create instances of 
            various ALI models.
            (Currently we support only one ALIModel.)
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory.GenerateModel(System.String)">
            <summary>
            Currently we know only one model, so no parameters are required,
            and we are always returning ALIModel object specifically.
            </summary>
            <returns></returns>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory._SAP">
            <summary>
            Private field.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory.AddModelGenerator(System.String,QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory.ModelGeneratorDelegate)">
            <summary>
            Registers a factory method for generating the specified model type.
            </summary>
            <param name="modelType">Recognized type of models</param>
            <param name="generator">Method delegate that knows how to construct this type of model</param>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory.SAP">
            <summary>
            Returns the singleton access point to the model factory.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.ModelFactory.ModelGeneratorDelegate">
            <summary>
            Type of the method that knows how to construct a model type.
            </summary>
            <returns>Model of a specific type</returns>
        </member>
        <member name="T:QBits.Intuition.Financials.Banking.TransactionRecord">
            <summary>
            Details of a transaction recorded in a bank system.
            <para/>Based on mBank implementation.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.TransactionDate">
            <summary>
            Example: Data operacji		11-03-2009
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.AccountingDate">
            <summary>
            Example: Data księgowania		11-03-2009
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.TransactionNumber">
            <summary>
            Example: Numer operacji		4547
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.TransactionKind">
            <summary>
            Example: Rodzaj operacji		PRZELEW WEWNĘTRZNY WYCHODZĄCY
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.TransactionTitle">
            <summary>
            Example: Tytuł operacji		RESZTA 
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.ReceivingAccount">
            <summary>
            Example: Rachunek odbiorcy		77 1140 2004 0000 3102 1092 2324
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.ReceiverName">
            <summary>
            Example: Nazwa/imię i nazwisko odbiorcy		ARTUR PERWENIS
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.ReceiverAddressLine1">
            <summary>
            Example: Adres odbiorcy (ulica)		POLSKICH MARYNARZY 8/10
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.ReceiverAddressLine2">
            <summary>
            Example: Kod pocztowy, miejscowość odbiorcy		71-050 SZCZECIN
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.SenderAccount">
            <summary>
            Example: Rachunek nadawcy		37 1140 2004 0000 3802 0646 7394
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.SenderName">
            <summary>
            Example: Nazwa/imię i nazwisko nadawcy		ARTUR GRZEGORZ PERWENIS
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.SenderAddressLine1">
            <summary>
            Example: Adres nadawcy (ulica)		UL POLSKICH MARYNARZY 8 M. 10
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.SenderAddressLine2">
            <summary>
            Example: Kod pocztowy, miejscowość nadawcy		71-050 SZCZECIN
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.TransactionAmount">
            <summary>
            Example: Kwota operacji		188,43 PLN
            </summary>
        </member>
        <member name="P:QBits.Intuition.Financials.Banking.TransactionRecord.AccountBalanceAfterTransaction">
            <summary>
            Example: Saldo po operacji		0,00 PLN
            <para/>TODO: Do we need this as part of transaction record?
            </summary>
        </member>
        <member name="T:QBits.Intuition.UI.UIHelper">
            <summary>
            Helper methods for working with Windows Forms applications.
            </summary>
        </member>
        <member name="M:QBits.Intuition.UI.UIHelper.UpdateIcon(System.Windows.Forms.Form,System.Reflection.Assembly,System.String)">
            <summary>
            Updates the form's icon to the application icon.
            </summary>
            <param name="uiWindow">Windows Form, on which to set the icon.</param>
            <param name="resourceAssembly">Assembly contianing the icon resource to load.</param>
            <param name="resourceName">Name of the icon resource. <para/>This is typically filename preceeded by assembly's namespace.</param>
        </member>
        <member name="M:QBits.Intuition.UI.UIHelper.SetWindowStateToDialog(System.Windows.Forms.Form)">
            <summary>
            Sets the parameters of the window so that it looks as typical dialog window.
            <para/>This means:
            <para/>Window is not resizable.
            <para/>Sizing cursors are not shown when mouse pointer hovers on window border.
            <para/>Window does not show on Windows taskbar.
            </summary>
            <param name="uiWindow">Window to set as dialog.</param>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.IConcept">
            <summary>
            Concept is a meta class defining the meaning language-independently.
            </summary>
            <remarks>
            Concept is what we are talking about currently.
            It should contain its 'source', which would be the input data (currently - simple string) in the source language.
            For example, when operator wants to translate sentence SA="This is a dog.", 
            he inputs the SA and SA is marked to be in English language, 
            then the generated IALIConcept object would - except for 
            its internal generated representation - contain its source "This is a dog." 
            along with the language designator of "English".
            </remarks>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron">
            <summary>
            http://pl.wikipedia.org/wiki/Neuron
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.Inputs">
            <summary>
            Inputs to this neuron.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.Outputs">
            <summary>
            Outputs of this neuron.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.ConnectTo(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron)">
            <summary>
            Creates a connection between an <see cref="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon"/> (output) of this neuron
            with a <see cref="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite"/> (input) of the other neuron.
            <para/>Signals from this neuron will be able to travel to the other neuron.
            </summary>
            <param name="other">Other neuron that should receive input from this neuron</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.ToString">
            <summary>
            Shows the base name and the number of inputs and outputs.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.Excite(System.Double)">
            <summary>
            Excites the neuron by applying a signal of the specified strength (Volts?).
            </summary>
            <param name="signal">Signal to be applied to this cell.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.AcceptConnection(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon)">
            <summary>
            Accepts a connection between one neuron (output) and this neuron (input).
            </summary>
            <param name="from">Source of the connection. This cell will create a dendrite that will be connected with this axon.</param>
            <returns>Dendrite that accepted this connection.</returns>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.SignalIsStrongEnoughToFireThisNeuron(System.Double)">
            <summary>
            Function that tests whether this signal is strong enough to cause to fire that signal to this neuron's output (axons).
            If this method returns true, the signal should be passed on to all outputs of this neuron.
            If this method returns false, the neuron should suppress the signal and do nothing.
            </summary>
            <param name="signal">Signal from this neuron that should be fired or not.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.OnNeuronExcited">
            <summary>
            Called when this neuron has been excited. Raises the event.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.HasOutputs">
            <summary>
            Indicates whether this neuron has output connections to other neurons.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.OutputCount">
            <summary>
            Indicates the number of outputs this neuron has.
            </summary>
        </member>
        <member name="E:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron.NeuronExcited">
            <summary>
            Event that is raised when this neuron gets excited.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Xml.SpecializedConfigXml._Params.Item(System.String)">
            <summary>
            Returns parameter node of specified name.
            </summary>
            <param name="paramName">Name of config node to look up in the document.</param>
            <returns>Looked up XmlNode of the specified name or null.</returns>
        </member>
        <member name="P:QBits.Intuition.Xml.SpecializedConfigXml._StringParams.Item(System.String)">
            <summary>
            Returns string value of "value" attribute of the parameter with the specified name.
            </summary>
            <remarks>This is a safe accessor. If the node with specified value does not exist, no exception is thrown, but a value of null is returned.</remarks>
            <param name="paramName">Name of config node to look up in the document.</param>
            <returns>Value of 'value' attribute with the specified name or null.</returns>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Elements.BaseCrosswordElement.Draw(System.Int32,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Overriders decide what to do.
            </summary>
            <param name="x">Horizontal position (pixels) within the parent control.</param>
            <param name="y">Vertical position (pixels) within the parent control.</param>
            <param name="parent">The parent control.</param>
        </member>
        <member name="F:QBits.Intuition.Crosswords.Elements.BaseCrosswordElement._crossword">
            <summary>
            Parent crossword of this element.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Crosswords.Elements.BaseCrosswordElement._wControl">
            <summary>
            Windows control associated with this element. Null if nothing.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Elements.BaseCrosswordElement.DeserializeFromNode(System.Xml.XmlNode)">
            <summary>
            Default implementation doesn't require anything from Xml.
            Override it, if your element type requires to read specific information that was serialized.
            </summary>
            <param name="myNode">Node from disk file, containing serialized information about this crossword element.</param>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Crossword.#ctor">
            <summary>
            For factory model, we require default constructor.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Crosswords.Crossword._parent">
            <summary>
            The parent control, where we can draw.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Crossword.MakeEmptyCrossword">
            <summary>
            Prepares a default crossword - after number of rows and columns has been specified.
            The default crossword consists of letters only (unassigned, of course).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Crossword.CreateLetters">
            <summary>
            Creates visual controls for the letters in the crossword, thus making the constructed crossword visible to the user.
            The controls are made children of Parent control (usually a group box).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Crossword.DrawCrossword">
            <summary>
            Since the elements of the crossword we are drawing are windows controls,
            we don't have to worry about them, so the derived implementation doesn't have to do anything to have them drawn.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Crossword.DeserializeFromNode(System.Xml.XmlNode)">
            <summary>
            Default implementation reads crossword dimensions (type is already known by CrosswordLoader, who used factory method
            to create appropriate crossword type). Then it deserializes all elements, by calling their appropriate deserializers
            (using factory method from ElementsFactory).
            Override it, if your derived crossword type requires to read specific information that was serialized.
            </summary>
            <param name="myNode">Node from disk file, containing serialized information about this crossword.</param>
        </member>
        <member name="F:QBits.Intuition.Crosswords.Crossword._defContainer">
            <summary>
            Contains definitions of this crossword.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Glia">
            <summary>
            http://pl.wikipedia.org/wiki/Komórki_glejowe
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.ByteSizes">
            <summary>
            Supported sizes for string formatting.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.ByteSizes.Kilobyte">
            <summary>
            One kilobyte (KB). Equal to 1024 bytes.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.ByteSizes.Megabyte">
            <summary>
            One megabyte (MB). Equal to 1024 kilobytes.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.ByteSizes.Gigabyte">
            <summary>
            One gigabyte (GB). Equal to 1024 gigabytes.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.ByteSizes.Terabyte">
            <summary>
            One terabyte (TB). Equal to 1024 gigabytes.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.ByteSizes.Petabyte">
            <summary>
            One petabyte (PB). Equal to 1024 terabytes.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Logger.LoggerSAP">
            <summary>
            Accessor class for Logger objects.
            Thread-safe as of 1.1.0.0.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.RegisterLogger(QBits.Intuition.Logger.ILogger)">
            <summary>
            Registers a new logger with the SAP. Note: Calling this method twice with the same logger object, will register two instances of it, causing every log entry to be sent to that logger twice.
            </summary>
            <param name="newLogger">New logger that will receive log entries</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.RegisterLogger(QBits.Intuition.Logger.ILogger,QBits.Intuition.Logger.LogLevel)">
            <summary>
            Registers a new logger with the SAP. Note: Calling this method twice with the same logger object, will register two instances of it, causing every log entry to be sent to that logger twice.
            </summary>
            <param name="newLogger">New logger that will receive log entries</param>
            <param name="maxSeverity">Maximum severity of log entries this logger wants to listen to.</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.UnregisterLogger(QBits.Intuition.Logger.ILogger)">
            <summary>
            Unregisters an existing logger so that LoggerSAP stops sending log events to this logger.
            </summary>
            <param name="registeredLogger">Logger previously registered with LoggerSAP</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the specified logger is not registered.</exception>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Log">
            <summary>
            A new log entry to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            <para/>This overload creates a new empty-line log entry. Can be used for log formatting purposes.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Log(System.String)">
            <summary>
            A new log entry to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Log(System.String,System.Object[])">
            <summary>
            A new log entry to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Log(QBits.Intuition.Logger.LogLevel,System.String)">
            <summary>
            New API in V2.3. Allows specifying the level of logging.
            </summary>
            <param name="logLevel">Severity of this log entry. Default is highest, Verbose (equivalent to Diagnostic) is lowest.</param>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Log(QBits.Intuition.Logger.LogLevel,System.String,System.Object[])">
            <summary>
            New API in V2.3. Allows specifying the log level of logging.
            <para/>A new log entry to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
            <param name="logLevel">Severity of this log entry. Default is highest, Verbose (equivalent to Diagnostic) is lowest.</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Trace(System.String,System.Object[])">
            <summary>
            A new log entry with Diagnostic severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Trace(System.String)">
            <summary>
            A new log entry with Diagnostic severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Trace">
            <summary>
            A new log entry with Diagnostic severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Warning(System.String,System.Object[])">
            <summary>
            A new log entry with Warning severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Warning(System.String)">
            <summary>
            A new log entry with Warning severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Warning">
            <summary>
            A new log entry with Warning severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Error(System.String,System.Object[])">
            <summary>
            A new log entry with Error severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Error(System.String)">
            <summary>
            A new log entry with Error severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Error">
            <summary>
            A new log entry with Error severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Critical(System.String,System.Object[])">
            <summary>
            A new log entry with Critical severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Critical(System.String)">
            <summary>
            A new log entry with Critical severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Critical">
            <summary>
            A new log entry with Critical severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Verbose(System.String,System.Object[])">
            <summary>
            A new log entry with Verbose severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">Format string for the log entry</param>
            <param name="args">Parameters that will be used with the <paramref name="entry"/> format string to produce a full log entry</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Verbose(System.String)">
            <summary>
            A new log entry with Verbose severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
            <param name="entry">String entry to be logged</param>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerSAP.Verbose">
            <summary>
            A new log entry with Verbose severity to be distributed to registered loggers. If no loggers are registered, the entry is discarded (nothing happens).
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LoggerSAP.loggerList">
            <summary>
            List of registered loggers with their levels.
            <para>Only registered loggers receive notifications about new log entries.</para>
            </summary>
        </member>
        <member name="T:QBits.Intuition.Logger.LoggerWithLevel">
            <summary>
            Meta class holding data about registered ILogger objects that also tracks their maximum severity.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.LoggerWithLevel.#ctor(QBits.Intuition.Logger.ILogger,QBits.Intuition.Logger.LogLevel)">
            <summary>
            Creates a new LoggerWithLevel by specifying the logger and its associated maximum logging severity.
            </summary>
            <param name="logger">New logger object</param>
            <param name="maxSeverity">Maximum severity which this logger wants to listen to.</param>
        </member>
        <member name="F:QBits.Intuition.Logger.LoggerWithLevel.Logger">
            <summary>
            Logger registered with LoggerSAP
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LoggerWithLevel.MaxSeverity">
            <summary>
            Maximum level of logging to be sent to this logger.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Logger.ILogger">
            <summary>
            If you want to implement a custom logger, that receives log entries from <seealso cref="T:QBits.Intuition.Logger.LoggerSAP"/>, implement this interface in your class.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.ILogger.AcceptLogEntry(QBits.Intuition.Logger.LogLevel,System.String)">
            <summary>
            A new log entry has just arrived. Do something with it.
            </summary>
            <param name="entry">Log entry being added.</param>
            <param name="logLevel">Severity of the message being recorded.</param>
        </member>
        <member name="T:QBits.Intuition.Crosswords.Elements.Definition">
            <summary>
            Definition field inside the crossword - cannot contain letters, but is blocking space.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Elements.Definition.DefinitionSetEH2(System.Object,System.EventArgs)">
            <summary>
            Handles event from the underlying class BaseDefinition cointained within _def.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Elements.Definition.GetObjectType">
            <summary>
            Dynamic type provided for serialization.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Crosswords.Elements.Definition.ObjectType">
            <summary>
            Static type provided for deserialization.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Crosswords.Definitions.BaseDefinition">
            <summary>
            Base abstract class for any definition of a term on any crossword.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Mathematics.MoreMath">
            <summary>
            Common mathematics operations not found in System.Math.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.MoreMath.NWD``1(``0,``0)">
            <summary>
            Calculates largest common divisor of the two values.
            <para/>Both values have to be positive integers.
            </summary>
            <typeparam name="T">Can be int, long</typeparam>
            <param name="value1">First of the values to find divisor for</param>
            <param name="value2">Second of the values to find divisor for</param>
            <returns>Largest common denominator</returns>
            
        </member>
        <member name="M:QBits.Intuition.Mathematics.MoreMath.NWD(System.Int32,System.Int32)">
            <summary>
            Calculates largest common divisor of the two values.
            <para/>Both values have to be positive integers.
            </summary>
            <param name="value1">First of the values to find divisor for</param>
            <param name="value2">Second of the values to find divisor for</param>
            <returns>Largest common denominator</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.MoreMath.NWD(System.Int64,System.Int64)">
            <summary>
            Calculates largest common divisor of the two values.
            <para/>Both values have to be positive integers.
            </summary>
            <param name="value1">First of the values to find divisor for</param>
            <param name="value2">Second of the values to find divisor for</param>
            <returns>Largest common denominator</returns>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Context">
            <remarks>
            Context keeps track of current context, for example:
            - what is 'it' we are talking about.
            - who 'me' that is speaking
            - who is 'he' we may be talking to
            - etc.
            </remarks>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Context.ContextThreadEntryPoint(System.Object)">
            <summary>
            The entry point for the context thread.
            </summary>
            <param name="threadParamObj"></param>
        </member>
        <member name="T:QBits.Intuition.Logger.TextLogger">
            <summary>
            Custom logging facility for Crossword. Do not user in other projects.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Threading.IEventWatcher">
            <summary>
            Allows watching for an event to synchronize threads.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Threading.IEventWatcher.WatchThisEvent(System.Threading.EventWaitHandle)">
            <summary>
            Of course, do what you will with this event. You can actually watch it or not.
            </summary>
            <param name="evt">Event to be watched</param>
        </member>
        <member name="F:QBits.Intuition.Logger.TextLogger.textLogFileName">
            <summary>
            Name of the log file for this custom logging facility. Hardcoded.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.TextLogger.#ctor">
            <summary>
            Creates a new instance of custom text logger for Crossword
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network">
            <summary>
            Neural network. All neural cells must belong to a network.
            Two neural cells from two networks cannot communicate with each other.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.Cells">
            <summary>
            All cells in this network.
            </summary>
        </member>
        <member name="F:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.PrivateGenerator">
            <summary>
            Random number generator used by this network.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.#ctor(System.String)">
            <summary>
            Constructor that initializes the name of this network.
            </summary>
            <param name="networkName"></param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.CreateCell``1">
            <summary>
            Creates a new neural cell that is added to this network.
            </summary>
            <returns>Reference to the newly created cell.</returns>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.FindCell(System.Guid)">
            <summary>
            Returns the cell with the specified identifier that belongs to this network.
            Throws exception if there is no such cell.
            </summary>
            <param name="cellId">Identifier of the cell to find.</param>
            <returns>Reference to the cell.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when there is no such cell.</exception>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.GetRandomCell">
            <summary>
            Gets a random cell from this network. Useful for random testing of signal passage.
            </summary>
            <returns>Randomly selected cell.</returns>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.ToString">
            <summary>
            Shows human-readable description of this network.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.AddMiddleLayer">
            <summary>
            Creates a new neural layer that is not an interface layer, and returns a reference to it.
            </summary>
            <returns>Reference to the new layer that has no neurons yet.</returns>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.AllMiddleLayers">
            <summary>
            Gets all middle layers in this network.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.CellCount">
            <summary>
            Gets the number of cells in this network. In complex networks this can be huge (billions).
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.Name">
            <summary>
            Name of this network.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.NetworkVolume">
            <summary>
            Gets the volume in space in which the network is located.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.InputLayer">
            <summary>
            Input layer of this network. Created on first access.
            <para/>Any network may - but doesn't have to - contain an input layer.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network.OutputLayer">
            <summary>
            Output layer of this network. Created on first access.
            <para/>Any network may - but doesn't have to - contain an output layer.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite">
            <summary>
            Dendryt (dendritum)- element neuronu, rozgałęziona (zazwyczaj) struktura, przenosząca sygnały otrzymywane z innych neuronów przez synapsy do ciała komórki, której jest częścią. Występuje w tkance nerwowej. Słowo wywodzi się z greckiego słowa "déndron", czyli drzewo. Dendryty otrzymały taką nazwę, ponieważ przypominają gałęzie.
            <para/>Funkcje dendrytów: przejmują informacje z receptorów (zgodnie z kierunkiem ) od receptorów do ciała komórki.
            <para/>Akson (neuryt) przekazuje informacje dalej, w kierunku: od ciała komórki do narządu wykonawczego bądź zakończenia synaptycznego.
            <para/>
            http://pl.wikipedia.org/wiki/Dendryt_(biologia)
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.#ctor(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Neuron,QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Axon)">
            <summary>
            Creates new instance of Axon that belongs to the indicated parent cell.
            </summary>
            <param name="parentCell">Parent cell (usually the caller) that creates this axon.</param>
            <param name="from">Source through which signals will flow into this dendrite.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.ToString">
            <summary>
            Provides easy to read description of this dendrite.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.Excite(System.Double)">
            <summary>
            Called from the axon that is the source of the signal for this target dendrite.
            Modifies the weighted signal at which this dendrite is supplying signal to its parent cell.
            Parent neuron is excited on a separate thread to allow this to finish in a finite time without stack overflow.
            </summary>
            <param name="signal">Signal to be applied to this cell.</param>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.OnDendriteExcited">
            <summary>
            Called when this dendrite has been excited. Raises the event.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.ParentCell">
            <summary>
            Cell that owns this Axon.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.SignalSource">
            <summary>
            Source of signal for this dendrite.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.SignalWeight">
            <summary>
            Weight (sensitivity) of the input signal as it travels through this dendrite into the receiving neuron cell.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.IncomingRawSignal">
            <summary>
            Signal value received from a source axon.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.WeightedSignal">
            <summary>
            Weighted signal that the parent neuron 'perceives' as incoming via this dendrite.
            </summary>
        </member>
        <member name="E:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Dendrite.DendriteExcited">
            <summary>
            Event that is raised when this dendrite gets excited.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.ByteSizeConverter">
            <summary>
            Converts amounts of bytes (such as disk capacities or RAM allocations) into string format representation,
            where - depending on the amount of bytes - Gigabytes, Terabytes, etc. are used instead of pure numeric values of billions of bytes.
            Sizes up to petabytes (PB) are supported.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.ByteSizeConverter.ConvertByteSizeToString(System.Int64)">
            <summary>
            Converts amounts of bytes (such as disk capacities or RAM allocations) into string format representation,
            where - depending on the amount of bytes - Gigabytes, Terabytes, etc. are used instead of pure numeric values of billions of bytes.
            Sizes up to petabytes (PB) are supported.
            For example, for a value of 1024, 1.00 KB is returned.
            <para/>CurrentCulture is used for string conversion.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.ByteSizeConverter.ConvertByteSizeToString(System.Int64,System.Globalization.CultureInfo)">
            <summary>
            Converts amounts of bytes (such as disk capacities or RAM allocations) into string format representation,
            where - depending on the amount of bytes - Gigabytes, Terabytes, etc. are used instead of pure numeric values of billions of bytes.
            Sizes up to petabytes (PB) are supported.
            For example, for a value of 1024, 1.00 KB is returned.
            </summary>
        </member>
        <member name="T:QBits.Intuition.SysUtils.DotNetFramework">
            <summary>
            Class that allows easy retrieval of .Net framework properties, such as version installed and service pack number.
            <para/>Implementation (incomplete) based on information on <seealso cref="!:http://stackoverflow.com/questions/199080/how-to-detect-what-net-framework-versions-and-service-packs-are-installed"/>.
            </summary>
        </member>
        <member name="M:QBits.Intuition.SysUtils.DotNetFramework.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:QBits.Intuition.SysUtils.DotNetFramework.IsVersion20Installed">
            <summary>
            Returns true when .Net Framework 2.0 is installed. False otherwise.
            </summary>
        </member>
        <member name="P:QBits.Intuition.SysUtils.DotNetFramework.IsVersion30Installed">
            <summary>
            Returns true when .Net Framework 3.0 is installed. False otherwise.
            </summary>
        </member>
        <member name="P:QBits.Intuition.SysUtils.DotNetFramework.IsVersion35Installed">
            <summary>
            Returns true when .Net Framework 3.5 is installed. False otherwise.
            </summary>
        </member>
        <member name="T:QBits.Intuition.DesignPatterns.Factory.UniversalFactory`2">
            <summary>
            This class is not thread-safe. If you want to use this class in multithreaded environment,
            you have to derive your own thread-safe implementation of:
            SAP, RegisterConstructor(), CreateObject()
            </summary>
            <typeparam name="classKey"></typeparam>
            <typeparam name="classBase"></typeparam>
        </member>
        <member name="T:QBits.Intuition.Mathematics.Geometry.Cube">
            <summary>
            A cube in the 3D world that defines a bounding cube for positions.
            Used to create 
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.Geometry.Cube.Origin">
            <summary>
            Initial position of the cube.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.Geometry.Cube.Stretch">
            <summary>
            Width, height and depth of the cube.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.BaseBrain">
            <summary>
            Purpose unknown. Fill in.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Mathematics.ContinuedFractionSquare">
            <summary>
            Calculates a http://en.wikipedia.org/wiki/Continued_fraction Continued Fraction
            that represents a square root of the specified number.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.ContinuedFractionSquare.#ctor(System.Double)">
            <summary>
            Constructs an instance that is able to calculate the Continued Fraction that represents 
            a square root of the specified <paramref name="liczba"/> number.
            </summary>
            <param name="liczba">Number, whose square root is to be represented as continued fraction</param>
        </member>
        <member name="M:QBits.Intuition.Mathematics.ContinuedFractionSquare.Znajdź">
            <summary>
            Finds the continued fraction for the square of the specified number.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.ContinuedFractionSquare.WartośćUłamka">
            <summary>
            Calculates the remaining portion of the number after A
            1/(B+(1/(C+(1/(...)))))
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.ContinuedFractionSquare.WartośćUłamka(System.Int32)">
            <summary>
            Calculates the remaining portion of the number after A
            1/(B+(1/(C+(1/(.../newCandidate)))))
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.ContinuedFractionSquare.CzyToJestPalindrom(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks whether the numbers in the sequence form a palindromic structure.
            </summary>
            <returns>True if it is a palindrome</returns>
        </member>
        <member name="F:QBits.Intuition.Mathematics.ContinuedFractionSquare.ZnalezionaNastępnaLiczba">
            <summary>
            Action that is executed every time a new sequence entry has been found.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.ContinuedFractionSquare.SekwencjaNieobrobiona">
            <summary>
            Gets a copy of the current sequence that has been calculated so far. It may not be complete.
            It may contain 0 elements.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.ContinuedFractionSquare.Palindrom">
            <summary>
            Gets the final computed palindrome sequence (except for the first element A, which is stored as <see cref="P:QBits.Intuition.Mathematics.ContinuedFractionSquare.A"/> member).
            The terminating number (equal to 2A) is not included. This is the palindrome sequence alone.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when an attempt is made to get the palindrome, when there is no palindrome.</exception>
        </member>
        <member name="P:QBits.Intuition.Mathematics.ContinuedFractionSquare.CzyToJestPalindromPoKtórymWystępuje2A">
            <summary>
            Checks if the sequence calculated so far already makes up a palindrome.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.ContinuedFractionSquare.A">
            <summary>
            First element in the continued fraction expression.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Logger.LogLevel">
            <summary>
            Level of log entry severity supported by a given ILogger.
            <para/>Determines - from highest to lowest, what a specific ILogger wants to receive.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LogLevel.Critical">
            <summary>
            Highest level of log severity.
            <para/>Important message, such as about a processing error of failed operation. Indicates that this log entry is critically important to a person debugging your application.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LogLevel.Error">
            <summary>
            Less severe than <see cref="F:QBits.Intuition.Logger.LogLevel.Critical"/>, reports a non-critical processing error in the application.
            <para/>Error &gt; Critical.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LogLevel.Warning">
            <summary>
            Less severe than <see cref="F:QBits.Intuition.Logger.LogLevel.Error"/>, warning about some major incident in the application.
            <para/>Warning &gt; Error.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LogLevel.Diagnostic">
            <summary>
            Informative message, lowest priority, provides verbose detail level. Used to trace execution of methods for debugging purposes.
            <para/>Diagnostic > Warning.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LogLevel.Verbose">
            <summary>
            Synonym of Diagnostic but more detailed. Provides most verbose level of log output.
            <para/>Verbose > Diagnostic.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Logger.LogLevel.Default">
            <summary>
            Lowest level of log entry. Provided for compatibility with pre 2.3 versions.
            If no log level is specified by a client that creates a log entry, this Default level will be used, so that any logger will accept it (this was the default behavior in 2.2 and earlier versions of Logger.dll).
            <para/>Default > Verbose.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.InputLayer">
            <summary>
            Input layer that provides mechanism to give input signals into neurons in this layer.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.InputLayer.#ctor(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network)">
            <summary>
            Constructs the input layer.
            </summary>
            <param name="owner">Network that this layer belongs to.</param>
        </member>
        <member name="T:QBits.Intuition.Text.Diff.StringDiffer">
            <summary>
            Analyzes two strings and presents an information about how different they are.
            <para/>Algorighm implemented after <seealso cref="!:http://en.wikipedia.org/wiki/Diff"/> and <seealso cref="!:http://en.wikipedia.org/wiki/Longest_common_subsequence_problem"/>.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.StringDiffer.#ctor(System.String)">
            <summary>
            Builds a differ that will be able to compare the original string with another string.
            </summary>
            <param name="originalString">String that will be treated as 'original' when comparing with other strings.</param>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.StringDiffer.Diff(System.String)">
            <summary>
            Compares the original string with this string.
            </summary>
            <param name="otherString">String that should be diffed.</param>
            <returns>Information about differences between strings.</returns>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.StringDiffer.FindLongestCommonSubsequence(System.Char[],System.Char[])">
            <summary>
            Finds the longest common subsequence as described in <seealso cref="!:http://en.wikipedia.org/wiki/Longest_common_subsequence_problem"/>
            </summary>
            <param name="left">Characters from the left (original) string.</param>
            <param name="right">Characters from the right (updated or new) string.</param>
            <returns>Longest common sequence found.</returns>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.StringDiffer.GetLCS(System.Char[],System.Char[])">
            <summary>
            Builds the longest common subsequence array for the provided strings.
            </summary>
            <param name="left">Original string</param>
            <param name="right">Updated version of the original string.</param>
        </member>
        <member name="T:QBits.Intuition.Text.Diff.Same">
            <summary>
            A difference type that denotes 'sameness' (namely, this difference is actually no difference at all).
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.Diff.Difference">
            <summary>
            Base class for all differences
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Difference.ToString">
            <summary>
            User-friendly display of the contents of this difference.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Same.#ctor(System.String)">
            <summary>
            Constructs an indicator that a string item is 'same'.
            </summary>
            <param name="text">Substring that is deemed as 'same'.</param>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Same.ToString">
            <summary>
            User-friendly display of the contents of this difference.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.Diff.Addition">
            <summary>
            A difference type that is a text addition.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Addition.#ctor(System.String)">
            <summary>
            Constructs an indicator that a string item has been added to the original string.
            </summary>
            <param name="text">Substring that is deemed as 'addition'.</param>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Addition.ToString">
            <summary>
            User-friendly display of the contents of this difference.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.Diff.Deletion">
            <summary>
            A difference type that is a text removal.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Deletion.#ctor(System.String)">
            <summary>
            Constructs an indicator that a string item has been added to the original string.
            </summary>
            <param name="text">Substring that is deemed as 'addition'.</param>
        </member>
        <member name="M:QBits.Intuition.Text.Diff.Deletion.ToString">
            <summary>
            User-friendly display of the contents of this difference.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Mathematics.Real">
            <summary>
            A real number of arbitrary precision.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Real.#ctor">
            <summary>
            Protected constructor to prevent instantiation outside the factory method.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Real.CreateReal(System.Double)">
            <summary>
            Factory method that produces an appropriate implementaion of <see cref="T:QBits.Intuition.Mathematics.Real"/> that 
            is optimized for the specified input parameter (<paramref name="initialValue"/>);
            </summary>
            <param name="initialValue">Value initially stored in this <see cref="T:QBits.Intuition.Mathematics.Real"/> number</param>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Real.ToDouble">
            <summary>
            Attempts to obtain a 'double' value of this Real.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Real.Add(QBits.Intuition.Mathematics.Real)">
            <summary>
            Attempts to add the other <see cref="T:QBits.Intuition.Mathematics.Real"/> to this <see cref="T:QBits.Intuition.Mathematics.Real"/>.
            </summary>
            <param name="other">The other <see cref="T:QBits.Intuition.Mathematics.Real"/> value to be added.</param>
            <returns>A <see cref="T:QBits.Intuition.Mathematics.Real"/> value being the sum of this and the other values.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Real.op_Implicit(QBits.Intuition.Mathematics.Real)~System.Double">
            <summary>
            Attempts to convert this <see cref="T:QBits.Intuition.Mathematics.Real"/> to 'double'.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Real.op_Addition(QBits.Intuition.Mathematics.Real,QBits.Intuition.Mathematics.Real)">
            <summary>
            Adds two Real values and returns a Real that is the sum of both.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.Real.IsNegative">
            <summary>
            Indicates whether this number is negative or not.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Mathematics.RealDouble">
            <summary>
            Optimized implementation of Real that is based on a single 'double' value.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.RealDouble.#ctor(System.Double)">
            <summary>
            Constructs a Real based on 'double' value type.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.RealDouble.ToDouble">
            <summary>
            Returns the value of ActualValue as double.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Mathematics.RealType">
            <summary>
            Indicates what kind of the real a <see cref="T:QBits.Intuition.Mathematics.Real"/> actually is.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Mathematics.RealType.OneDouble">
            <summary>
            The real is actually represented by a double.
            Internally the value in the real number is simply a double.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Elements.Letter.GetObjectType">
            <summary>
            Dynamic type provided for serialization.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Crosswords.Elements.Letter.ObjectType">
            <summary>
            Static type provided for deserialization.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Crosswords.Elements.EmptyElement.GetObjectType">
            <summary>
            Dynamic type provided for serialization.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Crosswords.Elements.EmptyElement.ObjectType">
            <summary>
            Static type provided for deserialization.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Assemblies.AssemblyHelper">
            <summary>
            Offers convenience methods for typical manipulation involving various Assembly-related data.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Assemblies.AssemblyHelper.AssemblyVersion(QBits.Intuition.Assemblies.WhichAssembly)">
            <summary>
            Returns assembly version attribute formatted as a string.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Assemblies.WhichAssembly">
            <summary>
            Indicates assembly to perform operations on.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Assemblies.WhichAssembly.EntryAssembly">
            <summary>
            Assembly which was used to start the current process.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Assemblies.WhichAssembly.ThisAssembly">
            <summary>
            Assembly which contains the method making a specific call into Intuition library.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Threading.ThreadSafeObject`1">
            <summary>
            An object, access to which is safe between threads.
            </summary>
            <typeparam name="SafeObject">Object wrapped around by this ThreadSafeObject</typeparam>
        </member>
        <member name="M:QBits.Intuition.Threading.ThreadSafeObject`1.op_Implicit(QBits.Intuition.Threading.ThreadSafeObject{`0})~`0">
            <summary>
            Converts implicitly thread-safe object into its contained type object.
            </summary>
            <param name="r">Thread-safe object to "unbox".</param>
            <returns>Unboxed, not thread-safe value contained by r.</returns>
        </member>
        <member name="M:QBits.Intuition.Threading.ThreadSafeObject`1.op_Implicit(`0)~QBits.Intuition.Threading.ThreadSafeObject{`0}">
            <summary>
            Boxes our value into thread-safe object.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="P:QBits.Intuition.Threading.ThreadSafeObject`1.Key">
            <summary>
            Key object used to lock access to this <see cref="!:ThreadSafeObject"/>
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.ProbabilityCloud">
            <summary>
            This class is a basic classic-quantum object.
            It realizes a quantum entity in classic world - that is - it contains all probability paths
            of existence of the quantum object within the classic world.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.ProbabilityCloud.Normalize">
            <summary>
            Ensures that after calling this method, the sum of quant probabilities equals to 1.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Mathematics.Complex">
            <summary>
            A class of complex numbers.
            Some equations for implementations were based on descriptions in this help:
             <see cref="!:http://commons.apache.org/math/apidocs/org/apache/commons/math/complex/Complex.html"/>
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Make(System.Double)">
            <summary>
            Creates a complex number from a real part only.
            <para/>Imaginary part will be 0.0.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Make(System.Double,System.Double)">
            <summary>
            Creates a complex number from real and imaginary components.
            </summary>
            <param name="real">Value of the real part of the complex number being constructed.</param>
            <param name="img">Value of the imaginary part of the complex number being constructed.</param>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.#ctor">
            <summary>
            Default value of the complex number. Real part will be 0.0 and imaginary part will be 0.0.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Creates a complex number from real and imaginary components.
            </summary>
            <param name="real">Value of the real part of the complex number being constructed.</param>
            <param name="img">Value of the imaginary part of the complex number being constructed.</param>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.ToString">
            <summary>
            Convenient formatting of the value of complex numbers. Depending on the values of real and imaginary parts,
            this method tries to produce output similar to that used in math books (skipping zeros as necessary, etc.)
            </summary>
            <returns>String representation of the complex number. To be used directly as output to user.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.op_Addition(QBits.Intuition.Mathematics.Complex,QBits.Intuition.Mathematics.Complex)">
            <summary>
            Adds two complex numbers using complex addition rules.
            </summary>
            <param name="left">Number to be added.</param>
            <param name="right">Number to be added.</param>
            <returns>Complex number representing a sum of input complex numbers.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.op_Multiply(QBits.Intuition.Mathematics.Complex,QBits.Intuition.Mathematics.Complex)">
            <summary>
            (a+ib)*(c+id) = ac + iad + ibc + iibd = (ac-bd) + i(ad+bc)
            </summary>
            <returns>Multiplication</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Pow(QBits.Intuition.Mathematics.Complex,QBits.Intuition.Mathematics.Complex)">
            <summary>
            Computes <paramref name="num"/> raised to <paramref name="exp"/> power.
            <para/>Implements this formula:
            <para/>  num^exp = Exp(exp * Ln(num))
            </summary>
            <param name="num">Base number that is raised to exp</param>
            <param name="exp">Exponent of the power</param>
            <returns><paramref name="num"/> raised to <paramref name="exp"/> power</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Ln(QBits.Intuition.Mathematics.Complex)">
            <summary>
            Compute the natural logarithm of this complex number.
            <para/>Implements the formula: 
            <para/>  ln(a + bi) = ln(|a + bi|) + arg(a + bi)i
            </summary>
            <param name="num">Number to compute natural logarithm from.</param>
            <returns>Natural logarithm of <paramref name="num"/> value.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Ln">
            <summary>
            Compute the natural logarithm of this complex number.
            </summary>
            <returns>Natural logarithm of this complex number.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Arg(QBits.Intuition.Mathematics.Complex)">
            <summary>
            Computes argument of this complex number.
            <para/>Implements this formula:
            <para/>   Arg(a + bi) = Math.Atan2(b, a)
            </summary>
            <returns>Return value is still a Complex, but the imaginary part is 0.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Arg">
            <summary>
            Computes argument of this complex number.
            <para/>Implements this formula:
            <para/>   Arg(a + bi) = Math.Atan2(b, a)
            </summary>
            <returns>Return value is still a Complex, but the imaginary part is 0.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Exp(QBits.Intuition.Mathematics.Complex)">
            <summary>
            Compute the exponential function of this complex number.
            <para/>Implements the formula: 
            <para/>  exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i
            <para/>  where the (real) functions on the right-hand side are: Math.exp(double), Math.cos(double), and Math.sin(double).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Exp">
            <summary>
            Compute the exponential function of this complex number.
            <para/>Implements the formula: 
            <para/>  exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i
            <para/>  where the (real) functions on the right-hand side are: Math.exp(double), Math.cos(double), and Math.sin(double).
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Mod(QBits.Intuition.Mathematics.Complex)">
            <summary>
            Computes a modus (or length of imaginary vector).
            </summary>
            <returns>Return value is still a Complex, but the imaginary part is 0.</returns>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.Mod">
            <summary>
            Computes a modus (or length of imaginary vector).
            </summary>
            <returns>Return value is still a Complex, but the imaginary part is 0.</returns>
        </member>
        <member name="F:QBits.Intuition.Mathematics.Complex.I">
            <summary>
            Constant equal to 0+i.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.op_Implicit(QBits.Intuition.Mathematics.Complex)~System.Double">
            <summary>
            Converts a Complex number to double by returning only its real part. Imaginary part is discarded.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Mathematics.Complex.op_Implicit(System.Double)~QBits.Intuition.Mathematics.Complex">
            <summary>
            Default assignment of a real number - creates a complex number whose real part equals to the specified real value,
            and imaginary part is 0.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.Complex.Real">
            <summary>
            Real part of this complex number.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Mathematics.Complex.Img">
            <summary>
            Imaginary part of this complex number.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.MiddleLayer">
            <summary>
            A layer in neural network that is not interfacing with the outside world.
            <para/>It can interface with other middle layers or with input layer or with output layer.
            </summary>
        </member>
        <member name="M:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.MiddleLayer.#ctor(QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.Network)">
            <summary>
            Creates an new middle layer in the specified network.
            </summary>
            <param name="owner">Network that this layer belongs to.</param>
        </member>
        <member name="T:QBits.Intuition.Text.FinancialHelper">
            <summary>
            Helper methods for working with financial strings.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.FinancialHelper.MAX_DIGS">
            <summary>
            Maximum number of supported digits.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.FinancialHelper.nBase">
            <summary>
            Base for textual representation - should be 10.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.FinancialHelper.ConvertQuotaToText(System.Double)">
            <summary>
            Converts a double value to textual currency string.
            <para/>For example:
            <para/>dwa tysiące sto osiemnaście złotych 48/100
            <para/>Maximum supported digits is: 8 (hudreds of millions); positive or negative values.
            <para/>Supported languages: Polish.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Text.QuotaTransformer">
            <summary>
            Class used by <see cref="M:QBits.Intuition.Text.FinancialHelper.ConvertQuotaToText(System.Double)"/> to store context while converting number to string.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.#ctor(System.Double,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="quota">Quota to convert</param>
            <param name="maxDigitsSupported">Indicates how many digits the calling code supports.</param>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.FixQuotaSign">
            <summary>
            Makes sure the converted quota is always positive.
            <para/>Stores the negative sign in a flag for reference.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.FillDecimalArray">
            <summary>
            Fills the decimals array with all digits from the quota.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.QuotaTransformer.QuotaTextBuilder">
            <summary>
            Working copy of the string.
            </summary>
        </member>
        <member name="F:QBits.Intuition.Text.QuotaTransformer.currentPart">
            <summary>
            Backing field for CurrentPart property.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.Append(System.String)">
            <summary>
            Appends next part of the quota string.
            </summary>
            <param name="stringPart">Next part to be appended to final quota string.</param>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.AppendCurrentPart">
            <summary>
            Appends a completed current part to the working quota string.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.AppendToCurrentPart(System.String)">
            <summary>
            Assembles the current part by adding the specified string to it.
            <para/>Note: to have this string added to the working string, you need to call <see cref="M:QBits.Intuition.Text.QuotaTransformer.AppendCurrentPart"/>.
            </summary>
            <param name="newSegment">New segment to be added to <paramref name="CurrentPart"/></param>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.AppendToCurrentPart(System.String,System.Object[])">
            <summary>
            Assembles the current part by adding the specified string to it.
            <para/>Note: to have this string added to the working string, you need to call <see cref="M:QBits.Intuition.Text.QuotaTransformer.AppendCurrentPart"/>.
            </summary>
            <param name="newSegmentFormat">Format string for the new segment to be added to <paramref name="CurrentPart"/></param>
            <param name="args">Arguments for the format string</param>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.SwitchToNextDigit">
            <summary>
            After appending current part to the working quota string, call this method to begin processing the next digit.
            <para/>It also resets the current part string to be empty so that next part can be computed.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.Restart">
            <summary>
            Restarts the internal state for processing of new quota.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.ProcessHundreds">
            <summary>
            Processes a position assuming it contains a number of hundreds of something (units, thousands, millions, billions, etc.)
            <para/>The caller must ensure the current digit is the correct 'hundreds of' digit.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.ProcessTensOf(System.String)">
            <summary>
            Processes a position assuming it contains a number of tens of something (units, thousands, millions, billions, etc.).
            <para/>The caller must ensure the current digit is the correct 'tens of' digit.
            </summary>
            <param name="unitsMultiple">Name of the unit in multiple form (such as 5 of more 'units'). For example: 'tysięcy'.</param>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.ProcessOnesOf(System.String,System.String,System.String)">
            <summary>
            Processes a position assuming it contains a number of units (złotys, thousands, millions, billions, etc.).
            <para/>The caller must ensure the current digit is the correct 'units of' digit.
            </summary>
            <param name="singleUnit">Name of the unit in singular form (such as 1 'unit'). For example: 'tysiąc'.</param>
            <param name="twoToFourUnits">Name of the unit in plural form of 2-4 items (such as 2 'units'). For example: 'tysiące'.</param>
            <param name="fiveOrMoreUnits">Name of the unit in plural form of 5-10 items (such as 5 'units'). For example: 'tysięcy'.</param>
        </member>
        <member name="M:QBits.Intuition.Text.QuotaTransformer.ProcessCustomOnesOf(System.String,System.String,System.String)">
            <summary>
            Processes the least significant (last) position assuming it contains a number of units (e.g. złotys.).
            <para/>The caller must ensure the current digit is the correct (last) 'units of' digit.
            <para/>The behavior for the last digit is slightly different than in <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessOnesOf(System.String,System.String,System.String)"/>, hence the need for a separate method.
            </summary>
            <param name="singleUnit">Name of the unit in singular form (such as 1 'unit'). For example: 'złoty'.</param>
            <param name="twoToFourUnits">Name of the unit in plural form of 2-4 items (such as 2 'units'). For example: 'złote'.</param>
            <param name="fiveOrMoreUnits">Name of the unit in plural form of 5-10 items (such as 5 'units'). For example: 'złotych'.</param>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.Quota">
            <summary>
            Input quota used to initialize this instance of QuotaTransformer.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.MaxDigitsSupported">
            <summary>
            Indicates to the Transformer how many digits (at maximum) are supposed to be handled.
            <para/>Digits after decimal place are not counted.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.LiczbaZłotych">
            <summary>
            Integer number of full złoty in the quota to be converted.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.LiczbaGroszy">
            <summary>
            Integer number of full grosz in the quota to be converted.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.QuotaIsNegative">
            <summary>
            Indicates that the original quota used to initialize this instance of QuotaTransformer was negative.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.QuotaString">
            <summary>
            Returns complete string of the quota (use it after conversion is complete, or the string will be partial).
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.AnyStringAlreadySet">
            <summary>
            Indicates that at least one part of the partial quota string has been already set.
            <para/>Used to determine whether to add a trailing portion, like "... złotych" or "... tysięcy" after a few '0' digits.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.DigitsArray">
            <summary>
            Stores digits at consecutive decimal places.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.CurrentDigit">
            <summary>
            Gets the digit currently being processed.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.PeekNextDigit">
            <summary>
            Peeks the digit next to the one currently being processed.
            <para/>Used when determining the proper representation of '-naście' values, such as 'jedenaście', 'dwanaście', etc. where two digits determine the string.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.CurrentUnitsPresent">
            <summary>
            Cross-call flag, reset at <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessHundreds"/>, then set/tested at <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessTensOf(System.String)"/>, then set/tested at <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessOnesOf(System.String,System.String,System.String)"/>
            to determine whether to present a unit name when going to the next level unit processing.
            <para/>I.e. If this flag is reset at <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessHundreds"/> and not set later either in <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessTensOf(System.String)"/> or <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessOnesOf(System.String,System.String,System.String)"/>
            then in <see cref="M:QBits.Intuition.Text.QuotaTransformer.ProcessOnesOf(System.String,System.String,System.String)"/> the unit name will not be appended to quota string.
            <para/>This is to avoid situations, when a number such as: 16,000,001.00 would produce a string containing 'thousands' name as in Polish:
            <para/>"szesnaście milionów tysięcy jeden złotych 0/100". In this case, "tysięcy" should not be added.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.CurrentPart">
            <summary>
            Gets or sets currently processed string part of the quota.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.DigitIterator">
            <summary>
            Automatic iterator over digits of the quota as it is being processed.
            </summary>
        </member>
        <member name="P:QBits.Intuition.Text.QuotaTransformer.SkipNextDigit">
            <summary>
            Flag that indicates whether the next part should be skipped, because it had been looked-ahead and processed by a previous processing step.
            For example in '-naście', where 10's portion is processed, it also consumes the singles digit to build a proper 'jedenaście', 'dwanaście', etc. string.
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.IDictionary">
            <summary>
            A base dictionary construct. We would create all more specialized dictionaries based on this base type.
            </summary>
        </member>
        <member name="T:QBits.Intuition.Logger.ConsoleLogger">
            <summary>
            Logs output to standard output of console windows.
            </summary>
        </member>
        <member name="M:QBits.Intuition.Logger.ConsoleLogger.AcceptLogEntry(QBits.Intuition.Logger.LogLevel,System.String)">
            <summary>
            Writes the text entry to console.
            </summary>
            <param name="entry">Log entry to process.</param>
            <param name="logLevel">Severity of the incoming message.</param>
        </member>
        <member name="P:QBits.Intuition.Logger.ConsoleLogger.ShowSeverity">
            <summary>
            Set to true to prepend the message in the console with severity information.
            <para/>If false, only the bare string entry will be output to console.
            </summary>
        </member>
        <member name="P:QBits.Intuition.AbstractLanguageIntelligence.Model.ProbabilityClouds.Meshes.Coordinate.rank">
            <summary>
            Rank (number of dimensions) of this node (should be the same as the rank of the containing space/mesh).
            </summary>
        </member>
        <member name="T:QBits.Intuition.AbstractLanguageIntelligence.Model.Brains.CellComparer">
            <summary>
            For performance, this custom comparer is used to determine whether two cells are equal.
            </summary>
        </member>
        <member name="T:QBits.Intuition.UI.UIExtensions">
            <summary>
            Extension methods for convenient access to various UI elements.
            </summary>
        </member>
        <member name="M:QBits.Intuition.UI.UIExtensions.InvokeOnUIThread(System.Windows.Threading.DispatcherObject,System.Windows.Forms.MethodInvoker)">
            <summary>
            Invokes the specified piece of code on the UI thread that owns this UI element.
            </summary>
            <param name="me">DispatcherObject that has a dispatcher.</param>
            <param name="method">Piece of code to be executed on UI thread.</param>
        </member>
        <member name="M:QBits.Intuition.UI.UIExtensions.ToList``1(System.Windows.Controls.ItemCollection)">
            <summary>
            Converts the contents to a list of objects that can be used in LinQ expressions.
            The resulting list contains only those elements which are of the indicated type.
            </summary>
        </member>
        <member name="M:QBits.Intuition.UI.UIExtensions.ToList``1(System.Windows.Controls.UIElementCollection)">
            <summary>
            Converts the contents to a list of objects that can be used in LinQ expressions.
            The resulting list contains only those elements which are of the indicated type.
            </summary>
        </member>
        <member name="M:QBits.Intuition.UI.UIExtensions.AddAndReference``1(System.Windows.Controls.UIElementCollection,``0)">
            <summary>
            Adds the specified UIElement to the collection and returns a refrence to the added object.
            Useful if you add a UIElement item by constructing it, but you later want to customize it (and you need a reference to it).
            </summary>
            <typeparam name="T">Type of UIElement that is being added (must derive from UIElement).</typeparam>
            <param name="me">UI element collection to which a new child is being added.</param>
            <param name="child">Child UIElement being added.</param>
            <returns>Reference to <paramref name="child"/>.</returns>
        </member>
        <member name="M:QBits.Intuition.UI.UIExtensions.AddGridItem``1(System.Windows.Controls.Grid,System.Int32,``0)">
            <summary>
            This is a macro (convenience) method.
            <para/> It adds a new child item to the grid (parent) at the specified row index in the parent grid.
            </summary>
            <param name="parent">Parent <see cref="T:System.Windows.Controls.Grid"/> view that will contain the specified child item.</param>
            <param name="gridRow">Row in the parent grid where the new child item should be placed.</param>
            <param name="child">Item to be added as child of the specified grid.</param>
            <typeparam name="T">UIElement to add to the grid.</typeparam>
            <returns>Reference to the constructed tree view.</returns>
        </member>
        <member name="M:QBits.Intuition.UI.UIExtensions.AddGridItem``1(System.Windows.Controls.Grid,System.Int32,System.Int32,``0)">
            <summary>
            This is a macro (convenience) method.
            <para/> It adds a new child item to the grid (parent) at the specified row and column index in the parent grid.
            </summary>
            <param name="parent">Parent <see cref="T:System.Windows.Controls.Grid"/> view that will contain the specified child item.</param>
            <param name="gridRow">Row in the parent grid where the new child item should be placed.</param>
            <param name="gridColumn">Column in the parent grid where the new child item should be placed.</param>
            <param name="child">Item to be added as child of the specified grid.</param>
            <typeparam name="T">UIElement to add to the grid.</typeparam>
            <returns>Reference to the constructed tree view.</returns>
        </member>
    </members>
</doc>
